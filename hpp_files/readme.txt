*Managed by Dylan Sukay*

hpp_products_scraper.py -> ran in the terminal using the command "python hpp_products_scrapper.py". Scrapes all the items in HPP Produce's website and saves them to hpp_products.csv. Ideally, it gets the product info from the json sent to the browser to update the websites infinite scroll, but about ~30% it has to visit the individual product page to get the full name of the item.

hpp_products.csv -> the Product info is saved here. It goes in 4 columns (Name, Price Per Pound, Quantity, and Price). When there isn't info to put into a certain column (e.g. the product does not have a price per pound) there is a None. Price per Pound and Price are integers (no excess info like $ or /LB is saved) and Name and Quantity are strings. This is imported into a SQL table that can be queried by our django webserver, so this file is not used again after that.

hpp_unit_scraper.py -> prints out all the units found in hpp_products.csv in the Price Per Pound and Quantity columns (this was before extraneous data was removed from Price Per Pound, the /LB etc. was still present). We used this to figure out what types of units were in the data so we could make list_of_units, units_to_remove, and units_to_convert so we could more effectively scrape the data (by looking for these units instead of depending on punctuation) and so we could ensure they would all work with the python package pint. Was not used after that first scraping run, but left here for evaluation purposes.

search_hpp_products.py -> the only file actively called in the implementation. The function find_product in it matches the ingredients of a recipe to the products online at Hyde Park Produce. It will return the product row from the HPP_Products SQL table. It does this through searching through the database for the exact string given and from the items that match, returning the one with the best Jaro-Winkler score. If none match, it splits the string up into individual words, searches for them all, and among the products that show up in the most searches, returns the one with the best Jaro-Winkler score. (It leaves something to be desired, sometimes the word with the least edits is a very simple name instead of the wordier, correct product. Also, HPP has a limited online selection (most of the spices are not online) and it is impossible to match with a product that isn't there. With more time, we would have tried out more matching algorithms and created a more robust product database.)